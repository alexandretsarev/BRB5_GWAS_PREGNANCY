SE_f <- sd(f) / sqrt(length(f))
tperm[i]=(mean(m) - mean(f))/sqrt(SE_m^2 + SE_f^2)
}
head(tperm)
tail(tperm)
tdf <- data.frame(t = tperm)
ggplot(tdf, aes(x =t)) + geom_histogram(fill="blue", color = "black") + geom_vline(xintercept = c(t_initial, -t_initial))
p_value <- mean(tperm <= -t_initial |tperm >= t_initial )
p_value
p_value <- mean(tperm <= -t_initial | tperm >= t_initial )
p_value
set.seed(12345)
male <- rnorm(100, 130, 5)
female <- rnorm(100, 129,5)
t.test(male, female)
# пермутационный тест = перемешивать мальчиков и девочек если мы считаем что при Но
# у нас считается что они из одной генеральной совокупнсоти ии по логике
# если это так, то среднее по ним не должно измениться
SE_m <- sd(male) / sqrt(length(male))
SE_f <- sd(female) / sqrt(length(female))
t_initial <- (mean(male) - mean(female))/sqrt(SE_m^2 + SE_f^2)
# тот же т критерий в ручнуЮ, как бы что в начале
f <- female
m <- male
num_perm <- sample(1:100,1)
order_m <- sample (1:100, num_perm)
order_f <- sample (1:100, num_perm)
f[order_f] <- male[order_f]
m[order_m] <- female[order_f]
SE_m <- sd(m) / sqrt(length(m))
SE_f <- sd(f) / sqrt(length(f))
t_p <- (mean(m) - mean(f))/sqrt(SE_m^2 + SE_f^2)
Nperm=10000
tperm <- rep(NA, Nperm)
set.seed(12345)
for (i in 1:(Nperm-1))
{
BOX <- c(male,female)
ord <-sample(1:200, 200)
f <- BOX[ord[1:100]]
m <- BOX [ord[101:200]]
SE_m <- sd(m) / sqrt(length(m))
SE_f <- sd(f) / sqrt(length(f))
tperm[i]=(mean(m) - mean(f))/sqrt(SE_m^2 + SE_f^2)
}
head(tperm)
tail(tperm)
# записываем инишн
tperm [Nperm] <- t_initial
tdf <- data.frame(t = tperm)
ggplot(tdf, aes(x =t))+
geom_histogram(fill="blue", color = "black")+
geom_vline(xintercept = c(t_initial, -t_initial))
p_value <- mean(tperm <= -t_initial | tperm >= t_initial )
p_value
p_value
# Пермутационная оценка значимсоти корреляции
library(coin)
library(MASS)
library(RColorBrewer)
ggplot(tdf, aes(x =t))+
geom_histogram(fill=brewer.pal(3,"Set2")[1], color = "black")+
geom_vline(xintercept = c(t_initial, -t_initial))
library(coin)
library(RColorBrewer)
library(MASS)
set.seed(1234567)
mu <- c(10, 20) #Вектор средних значений
Sigma <- matrix(.7, nrow=2, ncol=2)
set.seed(1234567)
mu <- c(10, 20) #Вектор средних значений
Sigma <- matrix(.7, nrow=2, ncol=2)
diag(Sigma) <- c(1, 3)
dat <- as.data.frame(mvrnorm(n=100, mu=mu, Sigma=Sigma))
dat
qplot(dat$V1, dat$V2)
cor.test(dat$V1, dat$V2, method = "spearman")
# тест для проверки значимости коэфициентов
spearman_test( V1 ~ V2, data = dat, distribution = approximate(B=99999))
spearman_test( V1 ~ V2, data = dat, distribution = approximate(B=99999))
mant <- mantel(dist_com, dist_chem, method="pearson", permutations = 9999)
mant
# Матрица координат описаний
geo <- read.table("~/Documents/MULTIMERIC_SPBU_2020/data/Coordinates.txt",header = TRUE, sep = "\t")
# Матрица расстояний между точками
dist_geo <- vegdist(geo[, -1], method = "euclidean")
# дальше считаем частную мантеловскую кореляцию
# частная корреляция - это когда рассматриваем облако точек не целиком а группируем по некоторму признаку
# в итоге положительная корреляция может стать отрицательной
mantel_partial <- mantel.partial(dist_com, dist_chem, dist_geo, method = "pearson", permutations = 9999)
mantel_partial
getwd()
com <- read.csv("~/Documents/MULTIMERIC_SPBU_2020/data/mussel_beds.csv",
sep=';', header = T)
ascam <- read.csv("~/Documents/MULTIMERIC_SPBU_2020/data/ASCAM.csv",
sep=';', header = T)
ascam
com
library(dplyr)
com_v2 <- com %>% filter(Bank == "Vor2")
com_v2
View(com)
colSums(is.na(com_v2))
ascam_v2 <- ascam %>% filter(Bank=="Vor2")
dist_com <- vegdist(com_v2,method = "log")
com_v2
dist_com <- vegdist(com_v2[,c(1:3)],method = "log")
dist_com <- vegdist(com_v2[,c(1:3)],method = "spearman")
com %>% filter(Bank == "Vor2") %>% select(-c(1:3)) %>%
decostand(.,method="log") -> log_com
com %>% filter(Bank == "Vor2") %>% select(-c(1:3)) %>%
decostand(.,method="log") -> log_com
com %>% filter(Bank == "Vor2") %>% select(-c(1:3))
com %>% filter(Bank == "Vor2") %>% select(-c(1:3)) %>%
decostand(method="log") -> log_com
com %>% filter(Bank == "Vor2") %>% select(-c(1:3)) %>%
decostand(,method="log") -> log_com
dist_com <- vegdist(log_com,method = "bray")
ascam
ascam %>% filter(Bank == "Vor2") %>% select(-c(1:2)) %>%
decostand(,method="log") -> log_ascam
dist_ascam <- vegdist(log_ascam,method = "euclidean")
ord_log_com M- metaMDS(log_com)
ord_log_com <- metaMDS(log_com)
ord_log_com <- metaMDS(log_com,autotransform = F)
mds_com <- scores(ord_log_com,display = 'sites')
mds_com
ord_log_com$stress
mds_com <- as.vector(com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com
mds_com <- scores(ord_log_com,display = 'sites')
mds_com$Year <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com
mds_com <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_com$Year <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_com$Year <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_path()
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_path()+
geom_label(aes(label=Year))
mds_com
mds_com$Year <- as.factor(mds_com$Year)
mds_com <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_com$Year <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com$Year <- as.factor(mds_com$Year)
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_path()+
geom_label(aes(label=Year))
str(mds_com)
mds_com <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_com$Year <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com$Year <- as.factor(mds_com$Year)
head(mds_com)
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_path()+
geom_text(aes(label=Year),hjust=0, vjust=0)
mantel(dist_com, dist_ascam)
mds_com <- as.data.frame(scores(ord_log_com,display = 'sites'))
com %>% filter(Bank == "Vor2") %>% select(Year)
mds_com$Year <- com %>% filter(Bank == "Vor2") %>% select(Year) %>% as.vector(.)
mds_com$Year
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_path()+
geom_text(aes(label=Year),hjust=0, vjust=0)
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_path()+
geom_text(aes(label=mds_com$Year),hjust=0, vjust=0)
## Градиентная модельная матрица
gradient_model <- vegdist(com$Year[com$Bank == "Vor2"], method="euclidian")
gradient_model
### 1) Наличие градиента в структуре сообщества
mantel(dist_com,gradient_model)
### 2) Наличие градиента в размерной структуре мидий
mantel(dist_ascam,gradient_model)
### Более корректное решение
mantel.partial(gradient_model,dist_vor2_com, dist_vor2_ascam)
### Более корректное решение
mantel.partial(gradient_model,dist_com, dist_ascam)
## Циклическая модельная матрица
cycmod <- function(x){
points <- data.frame(X=c(1:x), Y=c(1:x))
for (i in 1:x) {
points$X[i] <- cos(2*pi*(i-1)/x)
points$Y[i] <- sin(2*pi*(i-1)/x)
}
return(points)
}
qplot(cycmod(nrow(mds_vor2_ascam))$X, cycmod(nrow(mds_vor2_ascam))$Y, xlab="X", ylab="Y", geom = "point", size = 4)
## Тестируем гипотезу о наличии градиента с помощью теста Мантела
dist_vor2_com <- vegdist(, method = "bray")
dist_vor2_ascam <- vegdist(, method = "euclidean")
# Количество комбинаций
2^ncol(varechem)-1
# помещаем зависимую матрицу, а потом матрицу-предиктор, индекс =  используется для расстояний
BioEnv <- bioenv(varespec, varechem, method = "spearman", index = "bray")
BioEnv
plot(veg_ord)
plot(envfit(veg_ord ~ N + P + Al + Mn + Baresoil, data = varechem  ))
read.table("https://varmara.github.io/multivar/data/BCI_species.csv", header = TRUE)
bci_spec <- read.table("https://varmara.github.io/multivar/data/BCI_species.csv", header = TRUE)
View(bci_spec)
bci_spec <- read.table("https://varmara.github.io/multivar/data/BCI_species.csv", header = TRUE,sep=",")
View(bci_spec)
bci_spec <- read.table("https://varmara.github.io/multivar/data/BCI_species.csv", header = TRUE,sep=",")[,-1]
bci_env <- read.table("https://varmara.github.io/multivar/data/BCI_env.csv",header = T,sep=",")
View(bci_env)
bci_spec <- read.table("https://varmara.github.io/multivar/data/BCI_species.csv", header = TRUE,sep=",")[,-1]
bci_env <- read.table("https://varmara.github.io/multivar/data/BCI_env.csv",header = T,sep=",")[,-1]
tbl_df(bci_env)
str(bci_env)
str(bci_spec)
str(bci_spec) -> d
View(d)
rm(d)
bci_spec
View(bci_env)
qplot(bci_spec)
str(bci_spec)
bci_spec %>% select(-c(1:2)) %>%
decostand(.,method="log") -> log_bci_spec
bci_spec %>% select(-c(1:2)) %>%
decostand(.,method="log") -> log_bci_spec
bci_spec_dist <- vegdist(log_bci_spec,method = "bray")
ord <- metaMDS(bci_spec_dist,autotransform = F)
plot(ord)
ord_log_com <- metaMDS(log_bci_spec,autotransform = F)
plot(ord)
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
plot(ord_log_com)
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_point()
mds_sp$Hab <= bci_env$Habitat
mds_sp
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_sp$Hab <= bci_env$Habitat
View(bci_env)
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_sp$Hab <-bci_env$Habitat
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_point()
ggplot(mds_com,aes(NMDS1,NMDS2,col=Hab))+
geom_point()
ggplot(mds_com,aes(NMDS1,NMDS2,color=Hab))+
geom_point()
ggplot(mds_com,aes(NMDS1,NMDS2,colour=Hab))+
geom_point()
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_sp$Hab <-bci_env$Habitat
ggplot(mds_com,aes(NMDS1,NMDS2,colour=Hab))+
geom_point()
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_point(col=Hab)
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_point(color=Hab)
ggplot(mds_com,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab))
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab))
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=4)
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=4)+theme_bw()
bci_env_dist <- vegdist(bci_env,method = "gower")
View(bci_env)
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=4)+theme_bw()
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=6,alpha=0.5)+theme_bw()
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=8,alpha=0.5)+theme_bw()
bci_env_dist <- vegdist(bci_env,method = "gower")
bci_env_dist <- vegdist(bci_env[,c(7:9)],method = "gower")
bci_env[,c(7:9)]
bci_env_dist <- vegdist(bci_env[,c(7,8,9)],method = "gower")
bci_env[,c(7,8,9)]
bci_env[,c("Habitat","Stream","EnvHet")]
bci_env_dist <- vegdist(bci_env[,c("Habitat","Stream","EnvHet")],method = "gower")
table(bci_env$Stream)
table(bci_env$Habitat)
levels(bci_env$Habitat)
df <- data.frame(Habitat = levels(bci_env$Habitat),
Stream = levens(bci_env$Stream),
EnvHet = bci_env$EnvHet)
df <- data.frame(Habitat = levels(bci_env$Habitat),
Stream = levels(bci_env$Stream),
EnvHet = bci_env$EnvHet)
df
df <- data.frame(Habitat = levels(bci_env$Habitat),Habitat_code = 1:5)
df
merge(bci_env,df,by = Habitat)
merge(bci_env,df,by = "Habitat")
df <- data.frame(Habitat = levels(bci_env$Habitat),Habitat_code = 1:5,
Stream = levels(bci_env$Stream),Stream_code = 1:2)
df <- data.frame(Habitat = levels(bci_env$Habitat),
Habitat_code = 1:5,
Stream = levels(bci_env$Stream),
Stream_code = 1:2)
df <- data.frame(Habitat = levels(bci_env$Habitat),
Habitat_code = 1:5)
bci_env$Stream_code <- ifelse(bci_env$Stream=="Yes",1,0)
merge(bci_env,df,by = "Habitat") -> bci_env
bci_env
bci_env_dist <- vegdist(bci_env[,c("Habitat_code","Stream_code","EnvHet")],method = "euclidean")
plot(ord_log_com)
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_sp$Hab <-bci_env$Habitat
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=8,alpha=0.5)+theme_bw()
mantel(bci_spec_dist, dist_ascam)
bci_env_dist <- vegdist(bci_env[,c("Habitat_code","Stream_code","EnvHet")],method = "gower")
mantel(bci_spec_dist, dist_ascam)
mantel(bci_spec_dist, bci_env_dist)
mantel(bci_spec_dist, bci_env_dist,permutations = 9999)
mantel(bci_spec_dist, bci_env_dist,permutations = 99999)
method = "spearman", index = "bray")
bci_spec %>% select(-c(1:2)
bci_spec %>% select(-c(1:2)
# помещаем зависимую матрицу, а потом матрицу-предиктор, индекс =  используется для расстояний
BioEnv <- bioenv(bci_spec[,-c(1,2)], bci_env[,c("Habitat_code","Stream_code","EnvHet")],
method = "spearman", index = "bray")
BioEnv
plot(envfit(ord_log_com ~ Habitat, data = bci_env))
BioEnv
plot(envfit(bci ~ Habitat_code, data = bci_env))
plot(envfit(bci ~ Habitat_code, data = bci_env))
str(bci_env)
View(bci_env)
max(bci_spec)
ord_log_com <- metaMDS(log_bci_spec,autotransform = F)
ord_log_com <- metaMDS(log_bci_spec,autotransform = F)
plot(ord_log_com)
mds_sp <- as.data.frame(scores(ord_log_com,display = 'sites'))
mds_sp$Hab <-bci_env$Habitat
ggplot(mds_sp,aes(NMDS1,NMDS2))+
geom_point(aes(col=Hab),size=8,alpha=0.5)+theme_bw()
View(bci_env)
levels(bci_env$Habitat
df <- data.frame(Habitat = levels(bci_env$Habitat),
Habitat_code = 1:5)
df
merge(bci_env,df,by = "Habitat") -> bci_env
bci_env
df
mantel(bci_spec_dist, bci_env_dist,permutations = 99999)
BioEnv <- bioenv(bci_spec[,-c(1,2)], bci_env[,c("Habitat_code","Stream_code","EnvHet")],
method = "spearman", index = "bray")
bci_spec[,-c(1,2)]
merge(bci_env,df,by = "Habitat") -> bci_env
bci_env$Stream_code <- ifelse(bci_env$Stream=="Yes",1,0)
# помещаем зависимую матрицу, а потом матрицу-предиктор, индекс =  используется для расстояний
BioEnv <- bioenv(bci_spec[,-c(1,2)], bci_env[,c("Habitat_code","Stream_code","EnvHet")],
method = "spearman", index = "bray")
BioEnv
df <- read.table("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?view=data&acc=GPL15125&id=26591&db=GeoDb_blob72",
comment.char = "#",sep="\t")
head(df)
View(head(df))
library(data.table)
df <- fread("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?view=data&acc=GPL15125&id=26591&db=GeoDb_blob72",
sep="\t")
View(head(df))
df <- fread("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?view=data&acc=GPL15125&id=26591&db=GeoDb_blob72",
sep="\t",header = T)
View(head(df))
unique(df$`geneENTREZ</strong><strong>`)
nrow(unique(df$`geneENTREZ</strong><strong>`))
length(unique(df$`geneENTREZ</strong><strong>`))
setwd("~/Documents/Bioinf/BRB5/")
library(dplyr)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(qqman)
library(GenABEL)
library(CMplot)
library(viridis)
library(pbapply)
library(phenoscanner)
library(eulerr)
d <- read_excel("Pregnancy.xlsx")
View(d)
View(d)
d <- read_excel("Pregnancy.xlsx",col_names = F)
View(d)
d <- read_excel("Pregnancy.xlsx",col_names = c("a","b","c"))
View(d)
d <- read_excel("Pregnancy.xlsx",col_names = c("N","our_traits","gwas_traits"))
table_gl <- read_excel("Pregnancy.xlsx",col_names = c("N","our_traits","gwas_traits"))
rm(d)
View(table_gl)
df <- data.frame(table_gl$our_traits[1] = table_gl$gwas_traits[c(6)])
table_gl <- read_excel("Pregnancy.xlsx",col_names = c("N","our_traits","gwas_traits"))
df <- data.frame(table_gl$our_traits[1] = table_gl$gwas_traits[c(6)])
View(table_gl)
# Now preprocessing of variants from gwas catalog for LSEA
gwas_catalog <- read_excel("gwas_catalog_annotated.xlsx")
View(gwas_catalog)
gwas_catalog <- read_excel("gwas_catalog_annotated.xlsx")
gwas_catalog$Location <- gsub(gwas_catalog$Location,pattern="X",replacement = "23") # заменяю Х хромосому на 23
gwas_catalog$REF <- gwas_catalog$REF_man_corr
gwas_catalog$REF <- ifelse(is.na(gwas_catalog$REF),
as.character(as.data.frame(str_split_fixed(gwas_catalog$NUC_EXCHANGE,pattern = "/",Inf))[,1]),
gwas_catalog$REF)
gwas_catalog$ALT <- gwas_catalog$ALT_man_corr
gwas_catalog$ALT <- ifelse(is.na(gwas_catalog$ALT) & gwas_catalog$NUC_EXCHANGE!='no_data' ,
as.character(as.data.frame(str_split_fixed(gwas_catalog$NUC_EXCHANGE,pattern = "/",Inf))[,2]),
gwas_catalog$ALT)
gwas_catalog$ALT <- ifelse(grepl(gwas_catalog$ALT,pattern='/'),
as.character(as.data.frame(str_split_fixed(gwas_catalog$ALT,pattern = "/",Inf))[,2]),
gwas_catalog$ALT)
gwas_catalog %>%
summarise(non_valid_snp = subset(.,grepl(.$REF,pattern='-') | grepl(.$REF,pattern='no_data') | is.na(.$REF) |
grepl(.$ALT,pattern='-') | grepl(.$ALT,pattern='no_data') | is.na(.$ALT) |
is.na(.$COORDINATE)) %>% nrow(.),
valid_snp = nrow(.)-non_valid_snp,
total_snp = nrow(.))
gwas_catalog %>%
filter(.,grepl(.$REF,pattern='-')==F & grepl(.$REF,pattern='no_data')==F & is.na(.$REF)==F &
grepl(.$ALT,pattern='-')==F & grepl(.$ALT,pattern='no_data')==F & is.na(.$ALT)==F &
is.na(.$COORDINATE)==F) -> gwas_catalog_filtered
View(gwas_catalog_filtered)
gwas_catalog_filtered$CHR <- as.data.frame(str_split_fixed(gwas_catalog_filtered$Location,pattern = ":",Inf))[,1]
# Export gwas catalog snp for LSEA (total and separated by 25 selected phenotypes)
gwas_catalog_filtered %>% dplyr::select(c(CHR,COORDINATE,RSID,REF,ALT,PVAL)) %>% unique(.) -> gwas_catalog_filtered_lsea
table_gl <- read_excel("Pregnancy.xlsx",col_names = c("N","our_traits","gwas_traits"))
View(gwas_catalog_filtered_lsea)
gwas_traits <- read.csv("filt.csv")
gwas_traits$V3 <- paste(gwas_traits$V1,gwas_traits$V2,sep = "_")
gwas_catalog <- subset(gwas_catalog,gwas_catalog$Reported_trait %in% gwas_traits$V1 & gwas_catalog$`Trait(s)` %in% gwas_traits$V2)
gwas_catalog <- subset(gwas_catalog, gwas_catalog$Reported_trait %in% gwas_traits$V1 & gwas_catalog$`Trait(s)` %in% gwas_traits$V2)
gwas_traits <- as.data.frame(table(gwas_catalog$Reported_trait))
# editing of gwas_catalog dataframe
gwas_catalog$RSID <- as.data.frame(str_split_fixed(gwas_catalog$Variant_and_risk_allele, pattern = "-",n=Inf))[,1]
colnames(gwas_catalog)[2] <- "PVAL"
gwas_catalog$REF <- as.data.frame(str_split_fixed(as.data.frame(str_split_fixed(gwas_catalog$snp_info,pattern=";",n=Inf))[,2],pattern="\\/",Inf))[,1]
# calculation of phenotypes from the GWAS Catalog and the number of SNPs which they account for
ggplot(gwas_traits,aes(reorder(Var1,Freq),Freq))+
geom_bar(stat = 'identity',fill=brewer.pal(3,'Set1')[2])+
coord_flip()+
theme_bw()+ggtitle("GWAS Catalog traits\nrelated to pregnancy problems")+
ylab("Counts")+xlab("GWAS Catalog phenotypes")+
theme(axis.text.y = element_text(size=14,colour="black"),
title = element_text(size=20),axis.text.x=element_text(size=14,colour='black'))
View(table_gl)
View(gwas_catalog_filtered)
glotov_table <- read_excel("Pregnancy.xlsx",col_names = c("N","our_traits","gwas_traits"))
rm(table_gl)
View(gwas_traits)
View(glotov_table)
diab_gest <- subset(gwas_catalog_filtered,gwas_catalog_filtered$`Trait(s)` %in% glotov_table$gwas_traits[c(1:6)])
View(gwas_catalog_filtered)
diab_gest <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% glotov_table$gwas_traits[c(1:6)])
View(diab_gest)
glotov_table$our_traits
unique(glotov_table$our_traits)
View(glotov_table)
unique(glotov_table$our_traits)
unique(glotov_table$our_traits)
preterm_birth <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% glotov_table$gwas_traits[c(8:16)])
placental_abrup <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% "Placental abruption")
View(placental_abrup)
glotov_table
preeclampsia <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% "Preeclampsia")
Midgest_cytokine <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in%
"Midgestational cytokine/chemokine levels (maternal genetic effect)")
View(Midgest_cytokine)
rm(Midgest_cytokine)
getwd()
setwd("~/Documents/Bioinf/Git_BRB5/")
unique(glotov_table$our_traits)
vec <- c(glotov_table$gwas_traits[c(1:6)],glotov_table$gwas_traits[c(8:16)],
"Placental abruption",
"Preeclampsia",
"Midgestational cytokine/chemokine levels (maternal genetic effect)")
vec
glotov_table$gwas_traits[c(1:6)]
glotov_table <- read_excel("Pregnancy.xlsx",col_names = c("N","our_traits","gwas_traits"))
unique(glotov_table$our_traits)
diab_gest <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% glotov_table$gwas_traits[c(1:6)])
preterm_birth <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% glotov_table$gwas_traits[c(8:16)])
placental_abrup <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% "Placental abruption")
preeclampsia <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in% "Preeclampsia")
midgest_cytokine <- subset(gwas_catalog_filtered,gwas_catalog_filtered$Reported_trait %in%
"Midgestational cytokine/chemokine levels (maternal genetic effect)")
setwd("~/Documents/Bioinf/Git_BRB5/")
write.csv(diab_gest[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"dd.csv")
d <- read.csv("dd.csv")
View(d)
write.csv(diab_gest[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"dd.csv",row.names = F)
d <- read.csv("dd.csv")
View(d)
rm(d)
write.csv(diab_gest[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"diab_gest.csv",row.names = F)
write.csv(preterm_birth[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"diab_gest.csv",row.names = F)
write.csv(placental_abrup[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"diab_gest.csv",row.names = F)
write.csv(preeclampsia[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"diab_gest.csv",row.names = F)
write.csv(midgest_cytokine[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"diab_gest.csv",row.names = F)
write.csv(diab_gest[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"diab_gest.csv",row.names = F)
write.csv(preterm_birth[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"preterm_birth.csv",row.names = F)
write.csv(placental_abrup[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"placental_abrup.csv",row.names = F)
write.csv(preeclampsia[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"preeclampsia.csv",row.names = F)
write.csv(midgest_cytokine[,c("CHR","COORDINATE","RSID","REF","ALT","PVAL")],"midgest_cytokine.csv",row.names = F)
View(glotov_table)
