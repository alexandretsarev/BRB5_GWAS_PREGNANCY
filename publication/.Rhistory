p1 <- ggplotly(p1,tooltip = c("logFC","key1","key","key2","key3"))
return(p1)
} else {
return(p1)
}
# This part of function paints two-colored blue/red plot
} else if (colors == "mono"){
your_data$col <- ifelse(abs(your_data$logFC) >= log2(1.5) & your_data$adj.P.Val < 0.05,brewer.pal("Set1", n = 3)[1],brewer.pal("Set1", n = 3)[2])
p1 <- ggplot(data = your_data)+
geom_point(aes(x = logFC, y = -log10(adj.P.Val),
key=Description,
key1 = adj.P.Val,
key2 = High_expression,
key3 = Low_expression),col=your_data$col,
size=size)+
theme_bw()+
geom_vline(xintercept = c(log2(1.5),-log2(1.5)),linetype="dashed",col="darkgrey")+
geom_hline(yintercept = -log10(0.05),linetype="dashed",col="darkgrey")+
xlab("logFC")+ylab("-log(adj. pval)")+
labs(title=plot_name)
if (plotly == T){
p1 <- ggplotly(p1,tooltip = c("logFC","key1","key","key2","key3"))
return(p1)
} else {
return(p1)
}
}
}
# боксплот по всем белкам
boxplot(exprs(eset)[,1:50],main="Gene expression visualization (first 50 samples)")
stats <- topTable(fit2, number = nrow(fit2), sort.by = "none")
stats %>% filter(abs(logFC) >= 2 & adj.P.Val < 0.05) -> stats_filt
dim(stats)
dim(stats_filt)
stats %>% filter(abs(logFC) >= 1.5 & adj.P.Val < 0.05) -> stats_filt
dim(stats_filt)
stats %>% filter(abs(logFC) >= 2 & adj.P.Val < 0.05) -> stats_filt
dim(stats_filt)
hist(stats[, "P.Value"])
volcanoplot(fit2, highlight = 5, names = fit2$genes[, "symbol"])
# Design matrix for group means
design <- model.matrix(~0 + er, data = pData(eset))
head(design)
# Contasts matrix
cm <- makeContrasts(status = erpositive - ernegative,levels=design)
cm
fit <- lmFit(eset, design)
head(fit$coefficients)
fit2 <- contrasts.fit(fit, contrasts = cm)
head(fit2$coefficients)
fit2 <- eBayes(fit2)
results <- decideTests(fit2)
summary(results)
topTreat(fit2,sort.by = "P")
stats <- topTable(fit2, number = nrow(fit2), sort.by = "none")
stats %>% filter(abs(logFC) >= 2 & adj.P.Val < 0.05) -> stats_filt
dim(stats_filt)
hist(stats[, "P.Value"])
volcanoplot(fit2, highlight = 5, names = fit2$genes[, "symbol"])
data("leukemiasEset") -> eset2
dim(eset2)
data("leukemiasEset")
leukemiasEset -> eset2
dim(eset2)
table(pData(eset2)[,"type"])
colnames(pData(eset2))
table(pData(eset2)[,"Subtype"])
table(pData(eset2)[,"LeukemiaType"])
table(pData(eset2)[,"Tissue"])
table(pData(eset2)[,"LeukemiaTypeFullName"])
design2 <- model.matrix(~0+LeukemiaTypeFullName,data = pData(eset2))
design2
colSums(design2)
design2
colnames(pData(eset2))
View(eset2)
colnames(pData(eset2))
pData(eset2)$"LeukemiaTypeFullName"
levels(pData(eset2)$"LeukemiaTypeFullName")
data("leukemiasEset")
leukemiasEset -> eset2
dim(eset2)
colnames(pData(eset2))
table(pData(eset2)[,"LeukemiaTypeFullName"])
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Acute Lymphoblastic Leukemia",
replacement = "ALL")
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Acute Myelogenous Leukemia",
replacement = "AML")
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Chronic Lymphocytic Leukemia",
replacement = "CLL")
colnames(pData(eset2))
table(pData(eset2)[,"LeukemiaTypeFullName"])
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Acute Lymphoblastic Leukemia",
replacement = "ALL")
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Acute Myelogenous Leukemia",
replacement = "AML")
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Chronic Lymphocytic Leukemia",
replacement = "CLL")
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Non-leukemia and healthy bone marrow ",
replacement = "Control")
pData(eset2)[,"LeukemiaTypeFullName"] <- gsub(pData(eset2)[,"LeukemiaTypeFullName"],pattern = "Chronic Myelogenous Leukemia",
replacement = "CML")
table(pData(eset2)[,"LeukemiaTypeFullName"])
design2 <- model.matrix(~0+LeukemiaTypeFullName,data = pData(eset2))
design2
colnames(pData(eset2))
colnames(pData(eset2))[4] <- "TYPE"
data("leukemiasEset")
leukemiasEset -> eset2
dim(eset2)
colnames(pData(eset2))[4] <- "TYPE"
table(pData(eset2)[,"TYPE"])
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Acute Lymphoblastic Leukemia",
replacement = "ALL")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Acute Myelogenous Leukemia",
replacement = "AML")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Chronic Lymphocytic Leukemia",
replacement = "CLL")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Non-leukemia and healthy bone marrow ",
replacement = "Control")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Chronic Myelogenous Leukemia",
replacement = "CML")
table(pData(eset2)[,"TYPE"])
design2 <- model.matrix(~0+TYPE,data = pData(eset2))
design2
colSums(design2)
levels(pData(eset2)$"TYPE")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Non-leukemia and healthy bone marrow ",
replacement = "Control")
data("leukemiasEset")
leukemiasEset -> eset2
dim(eset2)
colnames(pData(eset2))[4] <- "TYPE"
table(pData(eset2)[,"TYPE"])
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Acute Lymphoblastic Leukemia",
replacement = "ALL")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Acute Myelogenous Leukemia",
replacement = "AML")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Chronic Lymphocytic Leukemia",
replacement = "CLL")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Non-leukemia and healthy bone marrow",
replacement = "Control")
pData(eset2)[,"TYPE"] <- gsub(pData(eset2)[,"TYPE"],pattern = "Chronic Myelogenous Leukemia",
replacement = "CML")
table(pData(eset2)[,"TYPE"])
design2 <- model.matrix(~0+TYPE,data = pData(eset2))
design2
colSums(design2)
cm2 <- makeContrasts(ALLvsCML = TYPEControl - TYPEALL,
TYPEControl - TYPEAML,
TYPEControl - TYPECLL,
TYPEControl - TYPECML)
cm2 <- makeContrasts(ALLvsCML = TYPEControl - TYPEALL,
TYPEControl - TYPEAML,
TYPEControl - TYPECLL,
TYPEControl - TYPECML,levels = design2)
cm2
fit_m <- lmFit(eset2,design2)
fit_m <- contrasts.fit(fit_m,contrasts = cm2)
fit_m2 <- eBayes(fit_m)
results2 <- decideTests(fit_m2)
summary(results2)
cm2 <- makeContrasts(CONvsALL = TYPEControl - TYPEALL,
CONvsAML = TYPEControl - TYPEAML,
CONvsCLL = TYPEControl - TYPECLL,
CONvsCML = TYPEControl - TYPECML,levels = design2)
cm2
fit_m <- lmFit(eset2,design2)
fit_m <- contrasts.fit(fit_m,contrasts = cm2)
fit_m2 <- eBayes(fit_m)
results2 <- decideTests(fit_m2)
summary(results2)
library(GEOquery)
GSE53990 <- getGEO("GSE53990", AnnotGPL = TRUE)[[1]]
View(GSE53990)
rm(GSE53990)
eset3 <- getGEO("GSE53990", AnnotGPL = TRUE)[[1]]
dim(eset3)
library(stringr)
rds <- "../data/arabidopsis-eset.rds"
if (!file.exists(rds)) {
gset <- getGEO("GSE53990", GSEMatrix = TRUE, getGPL = FALSE)
if (length(gset) > 1) idx <- grep("GPL198", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
eset <- gset
dim(eset)
plotDensities(eset, legend = FALSE)
# RMA normalization already applied
#
# > Raw chip data were analyzed with R/Bioconductor. Only perfect match (PM)
# > intensities were used. RMA function as implemented in the affy package was
# > used for background adjustment, normalization and summarization.
sum(rowMeans(exprs(eset)) > 5)
plotDensities(eset[rowMeans(exprs(eset)) > 5, ], legend = FALSE)
eset <- eset[rowMeans(exprs(eset)) > 5, ]
pData(eset) <- pData(eset)[, c("title", "genotype:ch1", "lt treatment time:ch1")]
colnames(pData(eset)) <- c("title", "type", "temp")
# Remove 48h sample. More noticeable effect at 120h (authors note that 48 hour
# timepoint is more interesting to them since it is more likely to give insight
# into mechanism since by 120h lots of downstream singaling has started.
# However, the effect is much more minimal, and thus not as useful for my
# pedagological needs)
eset <- eset[, pData(eset)[, "temp"] != "48h"]
# Clean up names
pData(eset)[, "type"] <- tolower(pData(eset)[, "type"])
pData(eset)[, "temp"] <- ifelse(pData(eset)[, "temp"] == "0h", "normal", "low")
pData(eset)[, "rep"] <- sprintf("r%d",
as.integer(str_sub(pData(eset)[, "title"], -1, -1)))
pData(eset)[, "title"] <- NULL
colnames(eset) <- paste(pData(eset)[, "type"],
pData(eset)[, "temp"],
pData(eset)[, "rep"], sep = "_")
head(pData(eset))
saveRDS(eset, file = "../data/arabidopsis-eset.rds")
} else {
eset <- readRDS(rds)
}
dim(eset)
table(pData(eset)[, c("type", "temp")])
# Create single variable
group <- with(pData(eset), paste(type, temp, sep = "."))
group <- factor(group)
group
# Create design matrix with no intercept
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
head(design, 3)
# Count the number of samples modeled by each coefficient
colSums(design)
# Create a contrasts matrix
cm <- makeContrasts(type_normal = vte2.normal - col.normal,
type_low = vte2.low - col.low,
temp_vte2 = vte2.low - vte2.normal,
temp_col = col.low - col.normal,
interaction = (vte2.low - vte2.normal) - (col.low - col.normal),
levels = design)
# View the contrasts matrix
cm
# Fit the model
fit <- lmFit(eset, design)
# Fit the contrasts
fit2 <- contrasts.fit(fit, contrasts = cm)
# Calculate the t-statistics for the contrasts
fit2 <- eBayes(fit2)
# Summarize results
results <- decideTests(fit2)
summary(results)
# Нормализация
plotDensities(eset, legend = FALSE)
# Нормализация
plotDensities(eset, legend = FALSE)
# Нормализация
plotDensities(eset, legend = FALSE)
# Нормализация
plotDensities(eset, legend = T)
# Нормализация
rds <- "../data/arabidopsis-eset-raw.rds"
eset <- readRDS(rds
eset <- readRDS(rds)
# Нормализация
rds <- "../data/arabidopsis-eset-raw.rds"
eset <- readRDS(rds)
# Нормализация
rds <- "../data/arabidopsis-eset-raw.rds"
eset <- readRDS(rds)
library(limma)
library(reshape2)
library(RColorBrewer)
library(GEOquery)
library(Biobase)
library(ggplot2)
library(reshape2)
library(limma)
library(MASS)
gse126297 <- getGEO("GSE126297", AnnotGPL = TRUE)[[1]]
fData(gse126297)
colnames(fData(gse126297))
colnames(pData(gse126297))
pData(gse126297)$"agent:ch1"
pData(gse126297)$"strain:ch1"
pData(gse126297)$"tissue:ch1"
pData(gse126297)$"agent:ch1"
colnames(pData(gse126297))[38]
colnames(pData(gse126297))[38] <- "treatment"
colnames(pData(gse126297))
View(head(fData(gse126297)))
fData(gse126297) <- fData(gse126297)[, c(2:4,10,14)]
colnames(fData(gse126297))
colnames(fData(gse126297)) <- gsub(colnames(fData(gse126297)),pattern = " ",replacement = "")
View(head(pData(gse126297)))
pData(gse126297) <- pData(gse126297)[, c(38:40)]
View(exprs(gse126297))
View(head(exprs(gse126297)))
View(head(fData(gse126297)))
# боксплот по всем белкам
boxplot(exprs(eset)[,1:50],main="Gene expression visualization (first 50 samples)")
rds <- "../data/arabidopsis-eset.rds"
if (!file.exists(rds)) {
gset <- getGEO("GSE53990", GSEMatrix = TRUE, getGPL = FALSE)
if (length(gset) > 1) idx <- grep("GPL198", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
eset <- gset
dim(eset)
plotDensities(eset, legend = FALSE)
# RMA normalization already applied
#
# > Raw chip data were analyzed with R/Bioconductor. Only perfect match (PM)
# > intensities were used. RMA function as implemented in the affy package was
# > used for background adjustment, normalization and summarization.
sum(rowMeans(exprs(eset)) > 5)
plotDensities(eset[rowMeans(exprs(eset)) > 5, ], legend = FALSE)
eset <- eset[rowMeans(exprs(eset)) > 5, ]
pData(eset) <- pData(eset)[, c("title", "genotype:ch1", "lt treatment time:ch1")]
colnames(pData(eset)) <- c("title", "type", "temp")
# Remove 48h sample. More noticeable effect at 120h (authors note that 48 hour
# timepoint is more interesting to them since it is more likely to give insight
# into mechanism since by 120h lots of downstream singaling has started.
# However, the effect is much more minimal, and thus not as useful for my
# pedagological needs)
eset <- eset[, pData(eset)[, "temp"] != "48h"]
# Clean up names
pData(eset)[, "type"] <- tolower(pData(eset)[, "type"])
pData(eset)[, "temp"] <- ifelse(pData(eset)[, "temp"] == "0h", "normal", "low")
pData(eset)[, "rep"] <- sprintf("r%d",
as.integer(str_sub(pData(eset)[, "title"], -1, -1)))
pData(eset)[, "title"] <- NULL
colnames(eset) <- paste(pData(eset)[, "type"],
pData(eset)[, "temp"],
pData(eset)[, "rep"], sep = "_")
head(pData(eset))
saveRDS(eset, file = "../data/arabidopsis-eset.rds")
} else {
eset <- readRDS(rds)
}
rds <- "../data/arabidopsis-eset.rds"
if (!file.exists(rds)) {
gset <- getGEO("GSE53990", GSEMatrix = TRUE, getGPL = FALSE)
if (length(gset) > 1) idx <- grep("GPL198", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
eset <- gset
dim(eset)
plotDensities(eset, legend = FALSE)
# RMA normalization already applied
#
# > Raw chip data were analyzed with R/Bioconductor. Only perfect match (PM)
# > intensities were used. RMA function as implemented in the affy package was
# > used for background adjustment, normalization and summarization.
sum(rowMeans(exprs(eset)) > 5)
plotDensities(eset[rowMeans(exprs(eset)) > 5, ], legend = FALSE)
eset <- eset[rowMeans(exprs(eset)) > 5, ]
pData(eset) <- pData(eset)[, c("title", "genotype:ch1", "lt treatment time:ch1")]
colnames(pData(eset)) <- c("title", "type", "temp")
# Remove 48h sample. More noticeable effect at 120h (authors note that 48 hour
# timepoint is more interesting to them since it is more likely to give insight
# into mechanism since by 120h lots of downstream singaling has started.
# However, the effect is much more minimal, and thus not as useful for my
# pedagological needs)
eset <- eset[, pData(eset)[, "temp"] != "48h"]
# Clean up names
pData(eset)[, "type"] <- tolower(pData(eset)[, "type"])
pData(eset)[, "temp"] <- ifelse(pData(eset)[, "temp"] == "0h", "normal", "low")
pData(eset)[, "rep"] <- sprintf("r%d",
as.integer(str_sub(pData(eset)[, "title"], -1, -1)))
pData(eset)[, "title"] <- NULL
colnames(eset) <- paste(pData(eset)[, "type"],
pData(eset)[, "temp"],
pData(eset)[, "rep"], sep = "_")
head(pData(eset))
saveRDS(eset, file = "../data/arabidopsis-eset.rds")
} else {
eset <- readRDS(rds)
}
dim(eset)
View(head(exprs(gse126297)))
head(colnames(fData(gse126297)))
head(fData(gse126297)$GeneID)
head(exprs(gse126297))
dim(exprs(gse126297))
dim(fData(gse126297))
fData(gse126297)$GeneID -> nrow(exprs(gse126297))
fData(gse126297)$GeneID -> rownames(exprs(gse126297))
length(rownames(exprs(gse126297)))
length(rownames(fData(gse126297)))
head(fData(gse126297)$GeneID)
head(exprs(gse126297))
head(fData(gse126297))
head(fData(gse126297))
head(exprs(gse126297))
gse126297_beg <- getGEO("GSE126297", AnnotGPL = TRUE)[[1]]
gse126297 <- gse126297_beg
colnames(fData(gse126297))
View(head(fData(gse126297)))
colnames(fData(gse126297))
colnames(pData(gse126297))
pData(gse126297)$"agent:ch1"
colnames(pData(gse126297))[38] <- "treatment"
#pData(gse126297)$"strain:ch1"
#pData(gse126297)$"tissue:ch1"
fData(gse126297) <- fData(gse126297)[, c(2:4,10,14)]
colnames(fData(gse126297)) <- gsub(colnames(fData(gse126297)),pattern = " ",replacement = "")
pData(gse126297) <- pData(gse126297)[, c(38:40)]
head(fData(gse126297))
head(exprs(gse126297))
dim(exprs(gse126297))
dim(fData(gse126297))
length(rownames(fData(gse126297)$GeneID))
length(fData(gse126297)$GeneID)
rownames(exprs(gse126297)) <- fData(gse126297)$GeneID
head(rownames(exprs(gse126297)))
fData(gse126297)$GeneID
rownames(exprs(gse126297)) <- as.vector(fData(gse126297)$GeneID)
colnames(fData(gse126297))
colnames(pData(gse126297))
pData(gse126297)$"agent:ch1"
colnames(pData(gse126297))[38] <- "treatment"
colnames(fData(gse126297))
colnames(pData(gse126297))
pData(gse126297)$"agent:ch1"
colnames(pData(gse126297))[38] <- "treatment"
colnames(fData(gse126297))
colnames(pData(gse126297))
pData(gse126297)$"agent:ch1"
colnames(pData(gse126297))[38] <- "treatment"
colnames(pData(gse126297))[38]
gse126297_beg <- getGEO("GSE126297", AnnotGPL = TRUE)[[1]]
gse126297 <- gse126297_beg
colnames(fData(gse126297))
colnames(pData(gse126297))
pData(gse126297)$"agent:ch1"
colnames(pData(gse126297))[38] <- "treatment"
fData(gse126297) <- fData(gse126297)[, c(2:4,10,14)]
colnames(fData(gse126297)) <- gsub(colnames(fData(gse126297)),pattern = " ",replacement = "")
pData(gse126297) <- pData(gse126297)[, c(38:40)]
head(fData(gse126297))
head(exprs(gse126297))
dim(exprs(gse126297))
dim(fData(gse126297))
length(fData(gse126297)$GeneID)
length(rownames(exprs(gse126297)))
rownames(exprs(gse126297)) <- as.vector(fData(gse126297)$GeneID)
head(rownames(exprs(gse126297)))
str(fData(gse126297)$GeneID)
str(as.factor(fData(gse126297)$GeneID))
rownames(exprs(gse126297)) <- str(as.factor(fData(gse126297)$GeneID))
head(rownames(exprs(gse126297)))
rownames(exprs(gse126297)) <- str(as.factor(fData(gse126297)$GeneID))
head(rownames(exprs(gse126297)))
str(as.factor(fData(gse126297)$GeneID))
str(as.factor(fData(gse126297)$GeneID))
str(as.factor(fData(gse126297)$GeneID))
str(as.factor(fData(gse126297)$GeneID))
str(as.factor(fData(gse126297)$GeneID))
rownames(exprs(gse126297)) <- str(as.factor(fData(gse126297)$GeneID))
rownames(exprs(gse126297)) <- as.factor(fData(gse126297)$GeneID)
head(rownames(exprs(gse126297)))
head(rownames(exprs(gse126297)))
rownames(exprs(gse126297)) <- as.factor(fData(gse126297)$GeneID)
rownames(Biobase::exprs(gse126297)) <- as.factor(fData(gse126297)$GeneID)
rownames(Biobase::exprs(gse126297))
rownames(Biobase::exprs(gse126297)) <- as.factor(fData(gse126297)$GeneID)
rownames(Biobase::exprs(gse126297)) <-
new_names <- as.factor(fData(gse126297)$GeneID)
rownames(Biobase::exprs(gse126297)) <-
new_names <- as.factoras.vector((fData(gse126297)$GeneID))
new_names <- as.factor(as.vector((fData(gse126297)$GeneID))
rownames(Biobase::exprs(gse126297)) <- new_names
head(new_names)
head(fData(gse126297))
new_names <- as.factor(as.vector((fData(gse126297)$Genesymbol))
rownames(exprs(gse126297)) <- new_names
head(rownames(exprs(gse126297)))
head(new_names)
# rename "s/bgz/gz/" *.bgz # one-liner to make .bgz files readable for data.table::fread
setwd("~/Documents/Bioinf/BRB5/")
library(dplyr)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(qqman)
library(GenABEL)
library(CMplot)
library(viridis)
library(pbapply)
library(phenoscanner)
library(eulerr)
total <- read.csv("total_ukbiobank_pregn.csv")
#View(table(total$variant)) # all SNPs are unique for each phenotype
total %>%
dplyr::filter(pval <= 1e-07) %>%
dplyr::select(-c(1,5:12)) %>%
dplyr::rename(PVAL = pval) -> total
total$CHR <- as.data.frame(str_split_fixed(total$variant,pattern = ":",n=2))[,1] %>% gsub(.,pattern = "X",replacement = 23)
total$COORDINATE <- as.data.frame(str_split_fixed(total$variant,pattern = ":",n=3))[,2]
# https://docs.google.com/spreadsheets/d/1kvPoupSzsSFBNSztMzl04xMoSC3Kcx3CrjVf4yBmESU/edit#gid=227859291
# it's written that Minor allele (equal to ref allele when AF > 0.5, otherwise equal to alt allele).
# in out dataset all of the MAF < 0.5 that Minor allele could be REF
colnames(total)[2] <- "REF"
total <- total %>% dplyr::select(-minor_AF) %>% dplyr::rename(UKB_dataset = Dataset)
as.data.frame(str_split_fixed(total$variant,pattern = ":",n=Inf)) %>% dplyr::rename(L = V3,R = V4) %>% dplyr::select(L,R) %>%
cbind(.,total) -> total
total$ALT <- ifelse(as.character(total$REF)==as.character(total$L),as.character(total$R),as.character(total$L))
total %>% dplyr::select(-c(L,R)) -> total
setwd("~/Documents/Bioinf/Git_BRB5/publication/")
sapply(total$UKB_dataset,function(x){
data <- subset(total,total$UKB_dataset==x)
full_name = paste0("ukb_",noquote(x),".csv",collapse = "")
write.csv(data[,c("variant","CHR","REF","ALT","COORDINATE","PVAL","UKB_dataset")],full_name,row.names = F)
})
